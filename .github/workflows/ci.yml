name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m venv .venv
          ./.venv/bin/python -m pip install -e '.[dev]'
      - name: Run unit tests
        run: |
          set -o pipefail
          ./.venv/bin/python -m pytest -q 2>&1 | tee pytest-output.txt
          RC=${PIPESTATUS[0]}
          exit $RC
      - name: Sanitize pytest output
        if: failure()
        run: |
          python ci/sanitize_logs.py pytest-output.txt pytest-output-sanitized.txt
      - name: Upload sanitized pytest output artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-output-sanitized-${{ github.run_id }}-${{ github.job }}
          path: pytest-output-sanitized.txt
      - name: Post short sanitized pytest snippet as commit comment
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SNIPPET=$(head -c 4000 pytest-output-sanitized.txt | sed 's/"/\\"/g' | sed "s/'/\\'/g")
          payload=$(jq -n --arg body "$SNIPPET" '{body: $body}')
          curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$payload" "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments" || true

  browsers:
    name: Prepare Playwright browsers (cache)
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Restore Playwright cache
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install dependencies and Playwright
        run: |
          python -m venv .venv
          ./.venv/bin/python -m pip install -e '.[dev]'
          # Always run install here to populate cache if missing
          ./.venv/bin/python -m playwright install --with-deps
      - name: Get Playwright version
        id: playwright-version
        run: |
          VERSION=$(.venv/bin/python -c "import importlib.metadata as m; print(m.version('playwright'))" 2>/dev/null || echo unknown)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Save Playwright cache (versioned)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

  behave:
    name: Behave (Playwright)
    needs: [unit, browsers]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Restore Playwright cache
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install dependencies
        run: |
          python -m venv .venv
          ./.venv/bin/python -m pip install -e '.[dev]'
      - name: Install Playwright browsers (if cache miss)
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: |
          ./.venv/bin/python -m playwright install --with-deps
      - name: Run Behave features
        run: |
          set -o pipefail
          ./.venv/bin/python -m behave -f pretty 2>&1 | tee behave-output.txt
          RC=${PIPESTATUS[0]}
          exit $RC
      - name: Sanitize behave output
        if: failure()
        run: |
          python ci/sanitize_logs.py behave-output.txt behave-output-sanitized.txt
      - name: Upload sanitized behave output artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: behave-output-sanitized-${{ github.run_id }}-${{ github.job }}
          path: behave-output-sanitized.txt
      - name: Post short sanitized behave snippet as commit comment
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SNIPPET=$(head -c 4000 behave-output-sanitized.txt | sed 's/"/\\"/g' | sed "s/'/\\'/g")
          payload=$(jq -n --arg body "$SNIPPET" '{body: $body}')
          curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$payload" "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments" || true
